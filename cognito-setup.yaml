AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cognito User Pool for Fitness Planner with Hosted UI'

Parameters:
  AppName:
    Type: String
    Default: fitness-planner
    Description: Name of the application
  
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # Cognito User Pool
  FitnessUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AppName}-${Environment}-user-pool'
      
      # Sign-in options      
      UsernameAttributes:
        - email
      
      # Custom attributes for roles and company
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: role
          AttributeDataType: String
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
        - Name: companyId
          AttributeDataType: String
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
        - Name: trainerIds
          AttributeDataType: String
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
      
      # Password policy
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      
      # Account recovery
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      
      # Email verification
      AutoVerifiedAttributes:
        - email
      
      # Email configuration (use SES if available)
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      
      # User pool add-ons
      UserPoolAddOns:
        AdvancedSecurityMode: AUDIT
      
      # Lambda triggers (optional - can be added later)
      # LambdaConfig:
      #   PreSignUp: !GetAtt PreSignUpFunction.Arn
      #   PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  # User Pool Domain for Hosted UI
  FitnessUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${AppName}-${Environment}-auth'
      UserPoolId: !Ref FitnessUserPool

  # User Pool Client (Web App)
  FitnessUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AppName}-${Environment}-web-client'
      UserPoolId: !Ref FitnessUserPool
      
      # OAuth settings for Hosted UI
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      
      # Callback URLs (update these for production)
      CallbackURLs:
        - http://localhost:4200/
        - https://localhost:4200/
        - http://localhost:4200/callback
        - https://localhost:4200/callback
      LogoutURLs:
        - http://localhost:4200/
        - https://localhost:4200/
      
      # Token validity
      AccessTokenValidity: 1  # 1 day
      IdTokenValidity: 1      # 1 day
      RefreshTokenValidity: 30 # 30 days
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days
      
      # Supported identity providers
      SupportedIdentityProviders:
        - COGNITO
      
      # Security settings
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      
      # Read/Write attributes
      ReadAttributes:
        - email
        - given_name
        - family_name
        - custom:role
        - custom:companyId
        - custom:trainerIds
      WriteAttributes:
        - email
        - given_name
        - family_name
        - custom:role
        - custom:companyId
        - custom:trainerIds

  # Identity Pool for AWS resource access
  FitnessIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${AppName}-${Environment}-identity-pool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref FitnessUserPoolClient
          ProviderName: !GetAtt FitnessUserPool.ProviderName

  # IAM Role for authenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}-${Environment}-authenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref FitnessIdentityPool
              ForAnyValue:StringLike:
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow users to access their own data
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: 
                  - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/dev/*/*'

  # Attach roles to identity pool
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref FitnessIdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # User Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      Description: Administrators with full access
      UserPoolId: !Ref FitnessUserPool
      Precedence: 10

  TrainerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Trainer
      Description: Fitness trainers who can manage clients and exercises
      UserPoolId: !Ref FitnessUserPool
      Precedence: 20

  ClientGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Client
      Description: Fitness clients with basic access
      UserPoolId: !Ref FitnessUserPool
      Precedence: 30

Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref FitnessUserPool
    Export:
      Name: !Sub '${AppName}-${Environment}-user-pool-id'

  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref FitnessUserPoolClient
    Export:
      Name: !Sub '${AppName}-${Environment}-client-id'

  IdentityPoolId:
    Description: ID of the Cognito Identity Pool
    Value: !Ref FitnessIdentityPool
    Export:
      Name: !Sub '${AppName}-${Environment}-identity-pool-id'

  HostedUIURL:
    Description: Hosted UI URL
    Value: !Sub 'https://${FitnessUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AppName}-${Environment}-hosted-ui-url'

  AuthDomain:
    Description: Auth domain for configuration
    Value: !Sub '${FitnessUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AppName}-${Environment}-auth-domain'
